{
	"info": {
		"_postman_id": "2be119a0-2ccc-4f23-871f-8fca8b8aa3d5",
		"name": "group30_HW2_Anatoly",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19096281"
	},
	"item": [
		{
			"name": "task 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить request.\r",
							"const reqObject = pm.request.url.query.toObject();\r",
							"// из респонса сделать объект, прописывая вручную каждое поле\r",
							"const respObject = {\r",
							"    age: String(pm.response.json().age),\r",
							"    name: pm.response.json().name,\r",
							"    salary: String(pm.response.json().salary)\r",
							"}\r",
							"pm.test(\"Compare request object and response object\", () => {\r",
							"    pm.expect(reqObject).to.deep.eql(respObject);\r",
							"});\r",
							"const jsonData = pm.response.json()\r",
							"const resp = {};\r",
							"//нужно пробежаться по объекту request object, \r",
							"//создать такие же ключи в новом объекте resp\r",
							"//и сбегать в response посмотреть, есть ли такие же ключи\r",
							"//и если есть, вставить их значения\r",
							"//проверяет в общем - упало/не упало, на соответствие схемы\r",
							"for(const key in reqObject) {\r",
							"    resp[key] = isNaN(jsonData[key]) ? jsonData[key] : +jsonData[key]\r",
							"    // если значение - число, то возвращает число, если нет, то строку\r",
							"    reqObject[key] = isNaN(reqObject[key]) ? reqObject[key] : +reqObject[key]\r",
							"}\r",
							"pm.test(\"2.0 Compare request object and response object\", () => {\r",
							"    pm.expect(reqObject).to.deep.eql(resp);\r",
							"});\r",
							"\r",
							"//объяснение строк 20 и 22\r",
							"//if(isNaN(jsonData[key])) resp[key] = jsonData[key]\r",
							"//else resp[key] = +jsonData[key]\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?age=51&name=Alyona&salary=550",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "51"
						},
						{
							"key": "name",
							"value": "Alyona"
						},
						{
							"key": "salary",
							"value": "550"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить salary из response\r",
							"const respSalary = pm.response.json().salary;\r",
							"// Спарсить request.\r",
							"const reqSalary = pm.request.url.query.get('salary');\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"respSalary.forEach((salary, index) => {\r",
							"    pm.test(`${reqSalary}*${index+1}===${salary}`, () => {\r",
							"        pm.expect(reqSalary*(index+1)).to.eql(+salary)\r",
							"        //console.log(salary_elems[property]);\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age=51&name=Alyona&salary=550",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "51"
						},
						{
							"key": "name",
							"value": "Alyona"
						},
						{
							"key": "salary",
							"value": "550"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"//2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"//3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
							"const age = pm.iterationData.get('age')\r",
							"const name = pm.iterationData.get('name')\r",
							"const salary = pm.iterationData.get('salary')\r",
							"\r",
							"function ageValidation(value) {\r",
							"    return value && !isNaN(value) && value > 17 && value < 121 && Number.isInteger(+value)\r",
							"}\r",
							"function salaryValidation(value) {\r",
							"    return value && !isNaN(value) && value > 0 && value < 1000001 && Number.isInteger(+value)\r",
							"}\r",
							"function nameValidation(value) {\r",
							"    return value && value.length > 2 && value.length < 41 && value.trim() === value\r",
							"}\r",
							"\r",
							"function validate(name, age, salary) {\r",
							"    return ageValidation(age) && salaryValidation(salary) && nameValidation(name)\r",
							"}\r",
							"if (validate(name, age, salary)) {\r",
							"    pm.test(`200 code with age == ${age}, salary == ${salary} and name == ${name}`, () => {\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							"} else {\r",
							"    pm.test(`NOT 200 code with age == ${age}, salary == ${salary} and name == ${name}`, () => {\r",
							"        pm.response.to.not.have.status(200);\r",
							"    })\r",
							"}\r",
							"/*pm.test(\"Check name in request has 3-40 characters without prefix and postfix space\", function () {\r",
							"    pm.expect(req.name).to.match(/^[^\\s]+[a-z0-9]{3-40}$/);\r",
							"});*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "task 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const keyisInJson = [\"start_qa_salary\", \"qa_salary_after_6_months\", \"qa_salary_after_12_months\", \"qa_salary_after_1.5_year\", \"qa_salary_after_3.5_years\", \"person\"]\r",
							"let resp = pm.response.json()\r",
							"// Проверить, что json response имеет параметры\r",
							"keyisInJson.forEach(key => {\r",
							"    pm.test(`response has ${key}`, () => {\r",
							"        pm.expect(resp).to.have.property(key);\r",
							"});\r",
							"})\r",
							"//4.2\r",
							"const salary = pm.environment.get('salary')\r",
							"const counters = {\r",
							"    'start_qa_salary': 1, \r",
							"    'qa_salary_after_6_months': 2, \r",
							"    'qa_salary_after_12_months': 2.7, \r",
							"    'qa_salary_after_1.5_year': 3.3, \r",
							"    'qa_salary_after_3.5_years': 3.8\r",
							"}\r",
							"for(const key in counters) {\r",
							"    pm.test(`${key} from response = salary from request * ${counters[key]}`, () => {\r",
							"            pm.expect(+resp[key]).to.eql(salary*counters[key]);\r",
							"    })\r",
							"}\r",
							"//4.3\r",
							"counters['person'] = ''\r",
							"for(const key in counters) {\r",
							"    pm.test(`response has ${key}`, () => {\r",
							"        pm.expect(resp).to.have.property(key);\r",
							"    });\r",
							"    if(key != 'person') {\r",
							"        pm.test(`${key} from response = salary from request * ${counters[key]}`, () => {\r",
							"            pm.expect(+resp[key]).to.eql(salary*counters[key]);\r",
							"    })\r",
							"\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "salary",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "age",
			"value": ""
		}
	]
}