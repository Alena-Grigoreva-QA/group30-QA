{
	"info": {
		"_postman_id": "9994358c-ff4a-46d7-8352-de280c3515a8",
		"name": "group30_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19096281"
	},
	"item": [
		{
			"name": "get_first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "post_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json.\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let jsonData = pm.response.json();\r",
							"let resp_name = jsonData.name;\r",
							"let resp_age = jsonData.age;\r",
							"let resp_salary = jsonData.salary;\r",
							"\r",
							"pm.test(\"Person_name_manual\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Alyona\");\r",
							"});\r",
							"pm.test(\"Person_age_manual\", function () {\r",
							"    pm.expect(resp_age).to.eql(\"51\");\r",
							"});\r",
							"pm.test(\"Person_salary_manual\", function () {\r",
							"    pm.expect(resp_salary).to.eql(500);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"pm.test(\"Person_name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"pm.test(\"Person_age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"pm.test(\"Person_salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(Number(req_salary));\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Salary_4\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alyona",
							"type": "text"
						},
						{
							"key": "age",
							"value": "51",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json.\r",
							"//4. Спарсить request.\r",
							"let jsonData = pm.response.json();\r",
							"let req = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(Number(req.salary));\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"let dog = JSON.stringify(jsonData.family.pets.dog);\r",
							"pm.test(\"Check dog for name\", function () {\r",
							"    pm.expect(dog).to.include(\"name\");\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check dog for age\", function () {\r",
							"    pm.expect(dog).to.include(\"age\");\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"console.log(dog)\r",
							"pm.test(\"Check jsonData.family.pets.dog name is Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check jsonData.family.pets.dog age is 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?age=51&name=Alyona&salary=550",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "51"
						},
						{
							"key": "name",
							"value": "Alyona"
						},
						{
							"key": "salary",
							"value": "550"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(parseInt(req.age));\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary);\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(Number(req.salary));\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary[1]\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql(String(req.salary*2));\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary[2]\", function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql(String(req.salary*3));\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\")\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\")\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\")\r",
							"//18. Передать в окружение переменную name\r",
							"postman.setEnvironmentVariable(\"name\", req.name)\r",
							"//19. Передать в окружение переменную age\r",
							"postman.setEnvironmentVariable(\"age\", req.age)\r",
							"//20. Передать в окружение переменную salary\r",
							"postman.setEnvironmentVariable(\"salary\", req.salary)\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"const salary_elems = jsonData.salary\r",
							"for (const property in salary_elems) {\r",
							"  console.log(salary_elems[property]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age=51&name=Alyona&salary=550",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "51"
						},
						{
							"key": "name",
							"value": "Alyona"
						},
						{
							"key": "salary",
							"value": "550"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "post_user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"//6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//7. Спарсить request.\r",
							"let req = request.data;\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Body ownProperty start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).ownProperty(\"start_qa_salary\");\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Body ownProperty qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).ownProperty(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Body ownProperty qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).ownProperty(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Body ownProperty qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).ownProperty(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Body ownProperty qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).ownProperty(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Body ownProperty person\", function () {\r",
							"    pm.expect(jsonData).ownProperty(\"person\");\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check if start_qa_salary from response equal to salary from request\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(Number(req.salary));\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check if qa_salary_after_6_months from response equal to salary*2 from request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(Number(req.salary)*2);\r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check if qa_salary_after_12_months from response equal to salary*2.7 from request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(Number(req.salary)*2.7);\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check if qa_salary_after_1.5_year from response equal to salary*3.3 from request\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(Number(req.salary)*3.3);\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check if qa_salary_after_3.5_years from response equal to salary*3.8 from request\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(Number(req.salary)*3.8);\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check if value of jsonData.person.u_name[1] from response equal to salary from request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(Number(req.salary));\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check if value of jsonData.person.u_name[1] from response equal to salary from request\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(Number(req.age));\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check if u_salary_5_years from response equal to salary*4.2 from request\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(Number(req.salary)*4.2);\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"const person = jsonData.person;\r",
							"for (const [key, value] of Object.entries(person)) {\r",
							"  console.log(`${key}: ${value}`);\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"pm.collectionVariables.set(\"salary\", pm.environment.get(\"salary\"));\r",
							"//2. Вставить параметр age из окружения в age\r",
							"pm.collectionVariables.set(\"age\", pm.environment.get(\"age\"));\r",
							"//3. Вставить параметр name из окружения в name\r",
							"pm.collectionVariables.set(\"name\", pm.environment.get(\"name\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "salary",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "age",
			"value": ""
		}
	]
}