Postman_HW2

http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//для всей коллекции
3. Проверить, что в body приходит правильный string.
pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});
Комментарий от ментора (Alexey Mytsykov):
"В первом запросе всё хорошо, но имейте в виду что что тест to.include() тестирует на вхождение строки, а не на равенство. Еще один вариант теста: pm.response.to.have.body("This is the first responce from server!")"

http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Проверить, что name в ответе равно name s request (name вбить руками.)
5. Проверить, что age в ответе равно age s request (age вбить руками.)
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
7. Спарсить request.
8. Проверить, что name в ответе равно name s request (name забрать из request.)
9. Проверить, что age в ответе равно age s request (age забрать из request.)
10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
Комментарий от ментора (Alexey Mytsykov):
"Второй запрос - отлично. Единственный комментарий: привести сроку к числу можно с помощью унарного плюса, так получается короче: pm.expect(resp_salary).to.eql(+req_salary);"
11. Вывести в консоль параметр family из response.
12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age s request (age забрать из request.)
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
8. Вывести в консоль параметр family из response.
9. Проверить, что у параметра dog есть параметры name.
10. Проверить, что у параметра dog есть параметры age.
Комментарий от ментора (Alexey Mytsykov):
"В третьем запросе не совсем здОрово сделаны пункты 9-10.
Вы переводите JSON в строку и потом ищите в строке вхождение подстроки с именем параметра. Но так может сработать только в частных случаях.
Вот как можно переписать (два варианта тестирования наличия свойства у объекта):
//9. Проверить, что у параметра dog есть параметры name.
let dog = jsonData.family.pets.dog;
pm.test("Check dog for name", function () {
    pm.expect(dog).to.include.keys("name");
    pm.expect(dog).to.have.property("name");
});"
11. Проверить, что параметр name имеет значение Luky.
Комментарий от ментора (Alexey Mytsykov):
"Соответственно, проверить что конкретное свойство имеет конкретное значение можно так: pm.expect(dog).to.have.property("name", "Luky");"
12. Проверить, что параметр age имеет значение 4.

http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age из request (age забрать из request.)
7. Вывести в консоль параметр salary из request.
8. Вывести в консоль параметр salary из response.
9. Вывести в консоль 0-й элемент параметра salary из response.
10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name
19. Передать в окружение переменную age
20. Передать в окружение переменную salary
21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
resp_salary.forEach((elem) => {console.log(elem)});

http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
Комментарий от ментора (Alexey Mytsykov):
"В пятом запросе использован Pre-request script - хорошо, но не совсем правильно :)
Вы у запроса на закладке Body определили параметры запроса через Form-data. В параметрах используются переменные - {{name}} и т.п.
При выполнении запроса Постман заменяет {{name}} на переменную с соответствующим именем.
А непосредственно значение переменной name может быть определено в разных местах, они ищутся (по порядку) в:
- локальных переменных, 
- данных из дата-файла, 
- переменных окружения,
- переменных коллекции, 
- глобальных переменных.
Вы в pre-request копируете переменные из переменных окружения в переменную коллекции. Но при выполнении запроса в параметры всё равно будут подставлены переменные из переменных коллекции, а не окружения, потому что такой порядок поиска. Получается что смысла в том что Вы сделали нету.
Но попытка хорошая! :)"
4. Отправить запрос.
5. Статус код 200
6. Спарсить response body в json.
7. Спарсить request.
8. Проверить, что json response имеет параметр start_qa_salary
9. Проверить, что json response имеет параметр qa_salary_after_6_months
10. Проверить, что json response имеет параметр qa_salary_after_12_months
11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
13. Проверить, что json response имеет параметр person
14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
let jsonData = pm.response.json()
const person = jsonData.person

for (const [key, value] of Object.entries(person)) {
  console.log(`${key}: ${value}`);
}

Код урока:
let jsonData = pm.response.json();
let resp_salary_1_5 = jsonData.family.u_salary_1_5_year;

console.log('resp_salary_1_5 =', resp_salary_1_5);

let req = request.data;
let req_salary = req.salary;
let req_salary_1_5 = req_salary * 4;
console.log('req_salary --', req_salary);

let person = jsonData.family.children;
console.log(person);
pm.test("Person_age", function () {
    pm.expect(person[0][1]).to.eql(24);
});

pm.environment.set("salary", req_salary_1_5)

pm.test("Salary_4", function () {
    pm.expect(req_salary_1_5).to.eql(resp_salary_1_5);
});

let family_json = JSON.stringify(jsonData);
console.log(family_json);
console.log(typeof family_json);
pm.test("Check family", function () {
    pm.expect(family_json).to.include("family");
});