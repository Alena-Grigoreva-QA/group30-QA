Client_Server_HW

1) Прочиать про клиент-серверную архитектуру
Клиент - это браузер либо другое приложение, которое общается с сервером. Отправляет запрос на сервер, получает данные, понимает и отображает их пользователю. 
Сервер - может быть железо, софт или другая сущность, которая принимает запрос и отвечает. Сервер обрабатывает запрос от сервера, хранит логику приложения, может хранить базу данных или посылает запрос на базу данных, получает данные и передает их клиенту.
Если сервер делает запрос другому серверу, то он по отношению к нему является клиентом. Например, при логине клиента, сервер может делать запрос на сторонние ресурсы (например, при логине на госуслугах отправляется запрос на сервер в налоговую, есть ли долги по налогам)
Компьютер или телефон могут быть сервером, если на нем запустить программу, принимающую запрос и посылающую ответ.
Клиентов может быть много, и одного сервера может быть мало. Серверов несколько (например, дата центры) и нагрузка на них распределяется балансировщиком.
Обширные базы даных тоже могут распределятся между разными машинами. Между серверами и базами данных тоже могут быть балансировщики. 
Клиент, сервер и база даных - три звена в трехуровневой архитектуре:
Уровень представления, уровень бизнес-логики, уровень данных.

2) Что такое HTTP и HTTPS
HTTP - гипертекстовый протокол передачи данных (hypertext transfer protocol). HTTPS отличается от HTTP тем, что передача данных шифруется и является безопасным (secure). Защита данных происходит с помощью сертификатов SSL/TSL. 

3) HTTP методы
Основные - GET, POST, PUT, DELETE

4) HTTP статус коды сервера
1хх информационные Information
2хх успешно Success
3хх перенаправление Redirect:
	301 ресурс перемещен навсегда
	302 ресурс перемещен временно
	303 смотрите другой ресурс
	304 ресурс не изменялся
4хх ошибка клиента Client Error:
	400 неверный запрос (некорректный синтаксис)
	401 неавторизованный запрос
	402 необходима оплата за запрос
	403 доступ к ресурсу запрещен
	404 ресурс не найден (страница не существует)
	405 недопустимый метод
	406 неприемлемый запрос (нужный документ не в том формате)
	408 время запроса истекло
	429 слишком много запросов
5хх ошибка сервера Server Error:
	500 внутренняя ошибка сервера
	501 метод не поддерживается
	505 версия HTTP не поддерживается
	507 недостаточно места

5) Что такое ядро браузера 
Это программа или модель, который отображает контент на основе языка разметки - распознает и начинает выполнять Javascript код, парсит html, прочитывет css и делает то, что нужно делать. На браузер прилетает пакет, ядро смотрит, что прилетело и собирает. html - это скелет, css это стиль, как работает - это javascript = механика. Ядро браузера состоит из движка рендеринга и движка JS.

6) Какие браузеры какиие ядра используют
Браузер это оболочка + ядро
Trident (ядро IE)
Gecko (ядро Firefox)
Presto (pre-Opera kernel) (устарело)
Webkit (ядро Safari, прототип ядра Chrome, открытый исходный код)
Blink - это механизм верстки браузера, разработанный Google и Opera Software

7) Что такое API
запрос на loginpage идет через прослойку = API, через который сервер слушает внешний мир

8. Что такое ендпоинты
У API есть эндпоинты - точки касания. У https://ksendzov.com/loginpage - loginpage это один из эндроинтов. В API прописан эндпоинт loginpage.
login & password в форме имеют placeholders
В эндпойнт login ресурса https://ksendzov.com/login отравляется запрос метода POST, в котором есть body, в котором лежат login и password в виде json. Плюс к этому, программисты написали, на какой эндпоинт полетит request. На сервере может быть валидация, может нет. Сервер несет логин в бд. Проверяет, есть ли такой user - идентификация. Если есть, делает аутентификацию - проверяет соответствие пароля логину. Если прошли, след стадия - авторизация, т.е. какие права имеет пользователь, например только на свои личные данные. Сервер делает запрос на базу и отдаёт ему пакет данных в виде json - личные данные, например в случае банка - номер его карточкиб истории его транзакций, баланс по его счёту. 


9) URL (URI, URL, URN)
URI - идентификатор ресурса

10) Идемпотентные HTTP методы
Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера. GET HEAD PUT DELETE - идемпотентные. DELETE - идемпотентный, несмотря на то, что возвращаемые коды отличаются. Все безопасные методы тоже идемпотентны () 

11) Безопасные HTTP методы
Метод HTTP является безопасным, если он не меняет состояние сервера, это GET HEAD и OPTIONS. Все безопасные методы идемпотентны.

12) Иденфикация, Аутентификация, Авторизация
идентификация - по логину или его отсутствию (зарегистрированный пользователь или гость). 
аутентификация - проверка подлиности по паролю, мб двухфакторной - пароль + код
авторизация - получение прав на определенные действия
Пример: Сервер несет логин в бд. Проверяет, есть ли такой user - идентификация. Если есть, делает аутентификацию - проверяет соответствие пароля логину. Если прошли, след стадия - авторизация, т.е. какие права имеет пользователь, например только на свои личные данные. 

13) Что такое IP
IP это межсетевой протокол
IP адрес - это уникальный числовой идентификатор устройства в сети, работающей по протоколу IP.

14) Что такое октеты в DNS
IP адрес состоит из четырех частей, записанных в виде десятичных чисел с точками. Каждую из этих частей, по 8 бит (для IPv4), имеющей значение от 0 до 255, называют октетом.

15) Что такое порт, сколько портов у Linux сервера

16) Уровни OSI

17) Хедеры http запросов

30 мин